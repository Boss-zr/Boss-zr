ERR_NUMBER2 = "Invalid number";
ERR_BIG_NUMBER2 = "Number too big to be accepted by system";
ERR_STRING_LONG2 = "Input too long. Maximal length is ";
ERR_YEAR2 = "Invalid year";
ERR_MONTH2 = "Invalid month";
ERR_DAY2 = "Invalid date";
ERR_EMAIL2 = "Invalid e-mail address";
ERR_NUMBER_NULL2 = "Must input";
ERR_INT_NULL2 = "Must input";
ERR_STRING_NULL2 = "Must input";
ERR_SELECT_NULL = " Must select";
ERR_DATE2 = "Invalid date input"

function trim(val)
{
	var str = val+"";
	if (str.length == 0) return str;
	var re = /^\s*/;
	str = str.replace(re,'');
	re = /\s*$/;
	return str.replace(re,'');
}

function checknumber(data,lbl){
	var tmp ;
	if (data == "") return true;
	//var re = /^[\-\+]?([1-9]\d*|0|[1-9]\d{0,2}(,\d{3})*)(\.\d+)?([Ee][\-\+]?\d+)?$/;
//	var re = /^[\-\+]?([1-9]\d*|0|[1-9]\d{0,2}(,\d{3})*)(\.\d+)?$/;
	var re = /^[\-\+]?([0-9]\d*|0|[1-9]\d{0,2}(,\d{3})*)(\.\d+)?$/;   // By Dennis set 04 OK!
	if (re.test(data)){
		gar = data + '.';
		tmp = gar.split('.');
		if (tmp[0].length > 15) {
				alert(lbl+":"+ERR_BIG_NUMBER2);
			
			return false;
		}
		return true;
	}
	
		alert(lbl+":"+ERR_NUMBER2);
	
	return false;
}

function checknumber_null(data,lbl){
	if (trim(data)==""){
		
			alert(lbl+":"+ERR_NUMBER_NULL2);
		
		return false;
	}
	return true;
}

function checkint_null(data,lbl){
	if (trim(data)==""){
	
			alert(lbl+":"+ERR_INT_NULL2);
	
		return false;
	}
	return true;
}

function checkstring_null(data,lbl)
{
	if (trim(data)==""){
		
			alert(lbl+":"+ERR_STRING_NULL2);
	
		return false;
	}
	return true;
}

function checkint(data,lbl)
{
	if (data == "") return true;
	var re = /^[\-\+]?([1-9]\d*|0|[1-9]\d{0,2}(,\d{3})*)$/;
	if (re.test(data)) 
		return true;
	
		alert(lbl+":"+ERR_NUMBER2);
	
	return false;
}

function checkstring(str,maxlen,lbl)
{
	if (str.length > maxlen){
		
			alert(lbl+":"+ERR_STRING_LONG2+maxlen);
	
		return false;
	}
	return true;
}

function checkyear(year,lbl)
{
	if (year.length == 0) return true;
	var temp = parseInt(year);
	if (!isNaN(temp)){
		if (year == 0) return true;
		low = 1900;
		high = 2037;
		if ((year >= low) && (year <=high)) return true;
	}

	errorYear(lbl);
	return false;
}

function checkmonth(month,low,high,lbl)
{
	var temp = parseInt(month);
	if (!isNaN(temp)){
		temp = parseInt(low);
		if (isNaN(temp)) low = 1;
		temp = parseInt(high);
		if (isNaN(temp)) high = 12;
		if ((month >= low) && (month <=high)) return true;
	}
	errorMonth(lbl);
	return false;
}

function errorDate(lbl)
{
	
		alert(lbl+":"+ERR_DATE2);

}
function errorYear(lbl)
{
	
		alert(lbl+":"+ERR_YEAR2);
	
}
function errorMonth(lbl)
{

		alert(lbl+":"+ERR_MONTH2);
	
}
function errorDay(lbl)
{
	
		alert(lbl+":"+ERR_DAY2);

}

function checkday(day,year,month,lbl)
{
	err = false;

	if (!checkint(year) || (year < 1900)) {
		errorYear(lbl);
		return false;
	}
	if (!checkint(month) || (month < 1) || (month > 12)){
		errorMonth(lbl);
		return false;
	}
	if (!checkint(day) || (day < 1) || (day > 31)){
		errorDay(lbl);
		return false;
	}
	
	switch (parseInt(month)){
		case 2:
			high =28;
			if ((year % 4 == 0) && (year % 100 != 0))
				{high =29;}
			else if (year % 400 == 0) {high=29;}
			break;
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			high =31;
			break;
		default:
			high =30;
	}
	if ((day < 1) || (day > high)){
		errorDay(lbl);
		return false;
	}
	return true;
}

function checkemail(umail,lbl)
{
	umail=trim(umail);
	if (umail.length == 0) return true;
	var re=/^[\-!#\$%&'\*\+\\\.\/0-9=\?A-Z\^_`a-z{|}~]+@[\-!#\$%&'\*\+\\\.\/0-9=\?A-Z\^_`a-z{|}~]+(\.[\-!#\$%&'\*\+\\\.\/0-9=\?A-Z\^_`a-z{|}~]+)+$/;
	if (re.test(umail))
		return true;
	
		alert(lbl+":"+ERR_EMAIL2);

	return false;
}

function checktime(ctime,lbl)
{
	if (ctime.length == 0) return true;

	var re=/^(([0-9]|[01][0-9]|2[0-3])(:([0-9]|[0-5][0-9])){0,2}|(0?[0-9]|1[0-1])(:([0-9]|[0-5][0-9])){0,2}\s?[aApP][mM])?$/;
	return re.test(ctime);
}
function checkdate(bdate){

	if (bdate.length == 0) return true;
	var re = /^(0?[1-9]|11|12|10)\/([1-2]?[0-9]|0[1-9]|30|31)\/([1-2]\d{3})$/;
	return re.test(bdate);
}


//Add by ck
//校验日期的函数
//在最终校验时使用
//source 校验的字符窜
function checkDate(source,lbl) {
	var str = source;
	if (str.length == 0) return true;
	
	var arList = str.split("/")
	if (arList.length != 3){ errorDate(lbl);return false; }
	if (!checkint(arList[0].replace("0",""),"Day"))
	{
		return false;
	}
	if (!checkint(arList[1].replace("0",""),"Month"))
	{
		return false;
	}
	if (!checkint(arList[2],"Year"))
	{
		return false;
	}
	var iDay = parseInt(arList[0],10);
	var iMonth = parseInt(arList[1],10);
	var iYear = parseInt(arList[2],10);

	if(isNaN(iYear) || isNaN(iMonth) || isNaN(iDay)) { errorDate(lbl);return false;}
		
	if (iYear<1900 || iYear>2099){ errorYear(lbl);return false; }
	
	if (iMonth>12 || iMonth<1){	errorMonth(lbl);return false; }
	
	if ((iMonth==1 || iMonth==3 || iMonth==5 || iMonth==7 || iMonth==8 || iMonth==10 || iMonth==12) && (iDay>31 || iDay<1)){ errorDay(lbl);return false; }
	
	if ((iMonth==4 || iMonth==6 || iMonth==9 || iMonth==11) && (iDay>30 || iDay<1)){ errorDay(lbl);return false; }
	
	if (iMonth==2){
		if (LeapYear(iYear)){
			if (iDay>29 || iDay<1){	errorDay(lbl);return false; }
		}
		else{
			if (iDay>28 || iDay<1){	errorDay(lbl);return false; }
		}
	}
	return true;
}

//判断是否闰年
//参数		intYear 代表年份的值
//return	true: 是闰年	false: 不是闰年
function LeapYear(intYear) {
	if (intYear % 100 == 0) {
		if (intYear % 400 == 0) { return true; }
	}
	else {
		if ((intYear % 4) == 0) { return true; }
	}
	return false;
}
function isDigital(checkStr)
{
var checkOK = "0123456789.";
var allValid = true;
if (checkStr.length<1)
 allValid=false;
  for (i=0;i<checkStr.length;i++)
  {
    ch=checkStr.charAt(i);
    for(j=0;j<checkOK.length;j++)
      if(ch==checkOK.charAt(j))
        break;
    if(j==checkOK.length)
    {
      allValid = false;
      break;
    }
  }
  return allValid;
}
var weekend = [0,6];
var weekendColor = "#e0e0e0";
var fontface = "Verdana";
var fontsize = 2;

var gNow = new Date();
var ggWinCal;
isNav = (navigator.appName.indexOf("Netscape") != -1) ? true : false;
isIE = (navigator.appName.indexOf("Microsoft") != -1) ? true : false;


Calendar.Months = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.",
"Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];

//Calendar.Months = ["一月", "二月", "三月", "四月", "五月", "六月",
//"七月", "八月", "九月", "十月", "十一月", "十二月"];


// Non-Leap year Month days..
Calendar.DOMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
// Leap year Month days..
Calendar.lDOMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function Calendar(p_item, p_WinCal, p_month, p_year, p_format) {
	if ((p_month == null) && (p_year == null))	return;

	if (p_WinCal == null)
		this.gWinCal = ggWinCal;
	else
		this.gWinCal = p_WinCal;
	
	if (p_month == null) {
		this.gMonthName = null;
		this.gMonth = null;
		this.gYearly = true;
	} else {
		this.gMonthName = Calendar.get_month(p_month);
		this.gMonth = new Number(p_month);
		this.gYearly = false;
	}

	this.gYear = p_year;
	this.gFormat = p_format;
	this.gBGColor = "white";
	this.gFGColor = "black";
	this.gTextColor = "black";
	this.gHeaderColor = "black";
	this.gReturnItem = p_item;
}

Calendar.get_month = Calendar_get_month;
Calendar.get_daysofmonth = Calendar_get_daysofmonth;
Calendar.calc_month_year = Calendar_calc_month_year;
Calendar.print = Calendar_print;

function Calendar_get_month(monthNo) {
	return Calendar.Months[monthNo];
}

function Calendar_get_daysofmonth(monthNo, p_year) {
	/* 
	Check for leap year ..
	1.Years evenly divisible by four are normally leap years, except for... 
	2.Years also evenly divisible by 100 are not leap years, except for... 
	3.Years also evenly divisible by 400 are leap years. 
	*/
	if ((p_year % 4) == 0) {
		if ((p_year % 100) == 0 && (p_year % 400) != 0)
			return Calendar.DOMonth[monthNo];
	
		return Calendar.lDOMonth[monthNo];
	} else
		return Calendar.DOMonth[monthNo];
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
	/* 
	Will return an 1-D array with 1st element being the calculated month 
	and second being the calculated year 
	after applying the month increment/decrement as specified by 'incr' parameter.
	'incr' will normally have 1/-1 to navigate thru the months.
	*/
	var ret_arr = new Array();
	
	if (incr == -1) {
		// B A C K W A R D
		if (p_Month == 0) {
			ret_arr[0] = 11;
			ret_arr[1] = parseInt(p_Year) - 1;
		}
		else {
			ret_arr[0] = parseInt(p_Month) - 1;
			ret_arr[1] = parseInt(p_Year);
		}
	} else if (incr == 1) {
		// F O R W A R D
		if (p_Month == 11) {
			ret_arr[0] = 0;
			ret_arr[1] = parseInt(p_Year) + 1;
		}
		else {
			ret_arr[0] = parseInt(p_Month) + 1;
			ret_arr[1] = parseInt(p_Year);
		}
	}
	
	return ret_arr;
}

function Calendar_print() {
	ggWinCal.print();
}

function Calendar_calc_month_year(p_Month, p_Year, incr) {
	/* 
	Will return an 1-D array with 1st element being the calculated month 
	and second being the calculated year 
	after applying the month increment/decrement as specified by 'incr' parameter.
	'incr' will normally have 1/-1 to navigate thru the months.
	*/
	var ret_arr = new Array();
	
	if (incr == -1) {
		// B A C K W A R D
		if (p_Month == 0) {
			ret_arr[0] = 11;
			ret_arr[1] = parseInt(p_Year) - 1;
		}
		else {
			ret_arr[0] = parseInt(p_Month) - 1;
			ret_arr[1] = parseInt(p_Year);
		}
	} else if (incr == 1) {
		// F O R W A R D
		if (p_Month == 11) {
			ret_arr[0] = 0;
			ret_arr[1] = parseInt(p_Year) + 1;
		}
		else {
			ret_arr[0] = parseInt(p_Month) + 1;
			ret_arr[1] = parseInt(p_Year);
		}
	}
	
	return ret_arr;
}

// This is for compatibility with Navigator 3, we have to create and discard one object before the prototype object exists.
new Calendar();

Calendar.prototype.getMonthlyCalendarCode = function() {
	var vCode = "";
	var vHeader_Code = "";
	var vData_Code = "";
	
	// Begin Table Drawing code here..
	vCode = vCode + "<table BORDER=\"0\" CELLSPACING=\"0\" WIDTH=\"100%\" CELLPADDING=\"0\" BGCOLOR=\"#999999\"><tr><td><table BORDER=\"0\" CELLSPACING=\"1\" CELLPADDING=\"1\" WIDTH=\"100%\" BGCOLOR=\"#999999\"><colgroup SPAN=\"7\" CLASS=\"td\" STYLE=\"line-height:16px;padding:5px;padding-top:2px;padding-bottom:0px;\">";
	vHeader_Code = this.cal_header();
	vData_Code = this.cal_data();
	vCode = vCode + vHeader_Code + vData_Code;
	
	vCode = vCode + "</TABLE>";
	
	return vCode;
}

Calendar.prototype.show = function() {
	var vCode = "";
	
	this.gWinCal.document.open();

	// Setup the page...
	this.wwrite("<html>");
	this.wwrite("<head><title>Calendar</title>");
	this.wwrite("<link REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"/inc/strix.css\">");
	this.wwrite("</head>");

	this.wwrite("<body>");
	this.wwrite("<table BORDER=\"0\" CELLSPACING=\"2\" CELLPADDING=\"0\" WIDTH=\"95%\" ALIGN=\"CENTER\" VALIGN=\"MIDDLE\">");
	// Show navigation buttons
	var prevMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, -1);
	var prevMM = prevMMYYYY[0];
	var prevYYYY = prevMMYYYY[1];

	var nextMMYYYY = Calendar.calc_month_year(this.gMonth, this.gYear, 1);
	var nextMM = nextMMYYYY[0];
	var nextYYYY = nextMMYYYY[1];
	this.wwrite("<tr>");
    this.wwrite("<td>");
    this.wwrite("<table BORDER=\"0\" CELLSPACING=\"1\" CELLPADDING=\"1\" WIDTH=\"100%\">");
	this.wwrite("<tr><TD calss=ttTable ALIGN=center>");
	this.wwrite("<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', '" + this.gMonth + "', '" + (parseInt(this.gYear)-1) + "', '" + this.gFormat + "'" +
		");" +
		"\">Y.<<<\/A></TD><TD calss=ttTable ALIGN=center>");
	this.wwrite("<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', '" + prevMM + "', '" + prevYYYY + "', '" + this.gFormat + "'" +
		");" +
		"\">M.<<\/A></TD><TD calss=ttTable ALIGN=center>");
	this.wwrite(this.gMonthName + " " + this.gYear + "</TD><TD ALIGN=center>");
	this.wwrite("<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', '" + nextMM + "', '" + nextYYYY + "', '" + this.gFormat + "'" +
		");" +
		"\">>M.<\/A></TD><TD calss=ttTable ALIGN=center>");
	this.wwrite("<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', '" + this.gMonth + "', '" + (parseInt(this.gYear)+1) + "', '" + this.gFormat + "'" +
		");" +
		"\">>>Y.<\/A></TD></TR></TABLE>");

	// Get the complete calendar code for the month..
	vCode = this.getMonthlyCalendarCode();
	this.wwrite(vCode);

	this.wwrite("</td></tr></table></td></tr><tr VALIGN=\"MIDDLE\"><td ALIGN=\"left\" NOWRAP CLASS=\"td\"><table BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\"><tr><td></td><a HREF=\"#\" ONCLICK=\"window.close();return false;\">Close</a>&nbsp;</td><td></td></tr></table></td></tr></table></body></html>");
	this.gWinCal.document.close();
}

Calendar.prototype.showY = function() {
	var vCode = "";
	var i;
	var vr, vc, vx, vy;		// Row, Column, X-coord, Y-coord
	var vxf = 285;			// X-Factor
	var vyf = 200;			// Y-Factor
	var vxm = 10;			// X-margin
	var vym;				// Y-margin
	if (isIE)	vym = 75;
	else if (isNav)	vym = 25;
	
	this.gWinCal.document.open();

	this.wwrite("<html>");
	this.wwrite("<head><title>Calendar</title>");
	this.wwrite("<style type='text/css'>\n<!--");
	for (i=0; i<12; i++) {
		vc = i % 3;
		if (i>=0 && i<= 2)	vr = 0;
		if (i>=3 && i<= 5)	vr = 1;
		if (i>=6 && i<= 8)	vr = 2;
		if (i>=9 && i<= 11)	vr = 3;
		
		vx = parseInt(vxf * vc) + vxm;
		vy = parseInt(vyf * vr) + vym;

		this.wwrite(".lclass" + i + " {position:absolute;top:" + vy + ";left:" + vx + ";}");
	}
	this.wwrite("-->\n</style>");
	this.wwrite("</head>");

	this.wwrite("<body " + 
		"link=\"" + this.gLinkColor + "\" " + 
		"vlink=\"" + this.gLinkColor + "\" " +
		"alink=\"" + this.gLinkColor + "\" " +
		"text=\"" + this.gTextColor + "\">");
	this.wwrite("<FONT FACE='" + fontface + "' SIZE=2><B>");
	this.wwrite("Year : " + this.gYear);
	this.wwrite("</B><BR>");

	// Show navigation buttons
	var prevYYYY = parseInt(this.gYear) - 1;
	var nextYYYY = parseInt(this.gYear) + 1;
	
	this.wwrite("<TABLE WIDTH='100%' BORDER=1 CELLSPACING=0 CELLPADDING=0 BGCOLOR='#e0e0e0'><TR><TD ALIGN=center>");
	this.wwrite("[<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', null, '" + prevYYYY + "', '" + this.gFormat + "'" +
		");" +
		"\" alt='Prev Year'>Y.<<<\/A>]</TD><TD ALIGN=center>");
	this.wwrite("[<A HREF=\"javascript:window.print();\">Print</A>]</TD><TD ALIGN=center>");
	this.wwrite("[<A HREF=\"" +
		"javascript:window.opener.Build(" + 
		"'" + this.gReturnItem + "', null, '" + nextYYYY + "', '" + this.gFormat + "'" +
		");" +
		"\">>>Y.<\/A>]</TD></TR></TABLE><BR>");

	// Get the complete calendar code for each month..
	var j;
	for (i=11; i>=0; i--) {
		if (isIE)
			this.wwrite("<DIV ID=\"layer" + i + "\" CLASS=\"lclass" + i + "\">");
		else if (isNav)
			this.wwrite("<LAYER ID=\"layer" + i + "\" CLASS=\"lclass" + i + "\">");

		this.gMonth = i;
		this.gMonthName = Calendar.get_month(this.gMonth);
		vCode = this.getMonthlyCalendarCode();
		this.wwrite(this.gMonthName + "/" + this.gYear + "<BR>");
		this.wwrite(vCode);

		if (isIE)
			this.wwrite("</DIV>");
		else if (isNav)
			this.wwrite("</LAYER>");
	}

	this.wwrite("</font><BR></body></html>");
	this.gWinCal.document.close();
}

Calendar.prototype.wwrite = function(wtext) {
	this.gWinCal.document.writeln(wtext);
}

Calendar.prototype.wwriteA = function(wtext) {
	this.gWinCal.document.write(wtext);
}

Calendar.prototype.cal_header = function() {
	var vCode = "";
	
	vCode = vCode + "<TR BGCOLOR=\"#d8c8a8\">";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Sun</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Mon</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Tue</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Wed</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Thu</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Fri</TD>";
	vCode = vCode + "<TD ALIGN=\"CENTER\" NOWRAP CLASS=\"ttTable\">Sat</TD>";
	vCode = vCode + "</TR>";
	
	return vCode;
}

Calendar.prototype.cal_data = function() {
	var vDate = new Date();
	vDate.setDate(1);
	vDate.setMonth(this.gMonth);
	vDate.setFullYear(this.gYear);

	var vFirstDay=vDate.getDay();
	var vDay=1;
	var vLastDay=Calendar.get_daysofmonth(this.gMonth, this.gYear);
	var vOnLastDay=0;
	var vCode = "";

	/*
	Get day for the 1st of the requested month/year..
	Place as many blank cells before the 1st day of the month as necessary. 
	*/

	vCode = vCode + "<TR BGCOLOR=\"#f0f0e8\">";
	for (i=0; i<vFirstDay; i++) {
		vCode = vCode + "<TD class=td> </TD>";
	}

	// Write rest of the 1st week
	for (j=vFirstDay; j<7; j++) {
		vCode = vCode + "<TD class=td>" + 
			"<A HREF='#' " + 
				"onClick=\"self.opener.document." + this.gReturnItem + ".value='" + 
				this.format_data(vDay) + 
				"';window.close();\">" + 
				this.format_day(vDay) + 
			"</A>" + 
			"</TD>";
		vDay=vDay + 1;
	}
	vCode = vCode + "</TR>";
	
	// Write the rest of the weeks
	for (k=2; k<7; k++) {
		vCode = vCode + "<TR BGCOLOR=\"#f0f0e8\">";

		for (j=0; j<7; j++) {
			vCode = vCode + "<TD class=td>" + 
				"<A HREF='#' " + 
					"onClick=\"self.opener.document." + this.gReturnItem + ".value='" + 
					this.format_data(vDay) + 
					"';window.close();\">" + 
				this.format_day(vDay) + 
				"</A>" + 
				"</TD>";
			vDay=vDay + 1;

			if (vDay > vLastDay) {
				vOnLastDay = 1;
				break;
			}
		}
		//alert(vCode + "/" +j);
		if (j == 7)
			vCode = vCode + "</TR>";
		if (vOnLastDay == 1)
			break;
	}
	
	// Fill up the rest of last week with proper blanks, so that we get proper square blocks
	for (m=1; m<(7-j); m++) {
		if (this.gYearly)
			vCode = vCode + "<TD class=td" + 
			"> </TD>";
		else
			vCode = vCode + "<TD class=td" +  
			">" + m + "</TD>";
	}
	vCode=vCode+"</TR>";
	return vCode;
}

Calendar.prototype.format_day = function(vday) {
	var vNowDay = gNow.getDate();
	var vNowMonth = gNow.getMonth();
	var vNowYear = gNow.getFullYear();

	if (vday == vNowDay && this.gMonth == vNowMonth && this.gYear == vNowYear)
		return ("<FONT COLOR=\"RED\"><B>" + vday + "</B></FONT>");
	else
		return (vday);
}

Calendar.prototype.write_weekend_string = function(vday) {
	var i;

	// Return special formatting for the weekend day.
	for (i=0; i<weekend.length; i++) {
		if (vday == weekend[i])
			return (" BGCOLOR=\"" + weekendColor + "\"");
	}
	
	return "";
}

Calendar.prototype.format_data = function(p_day) {
	var vData;
	var vMonth = 1 + this.gMonth;
	vMonth = (vMonth.toString().length < 2) ? "0" + vMonth : vMonth;
	var vMon = Calendar.get_month(this.gMonth).substr(0,3).toUpperCase();
	var vFMon = Calendar.get_month(this.gMonth).toUpperCase();
	var vY4 = new String(this.gYear);
	var vY2 = new String(this.gYear.substr(2,2));
	var vDD = (p_day.toString().length < 2) ? "0" + p_day : p_day;

	switch (this.gFormat) {
		case "MM\/DD\/YYYY" :
			vData = vMonth + "\/" + vDD + "\/" + vY4;
			break;
		case "MM\/DD\/YY" :
			vData = vMonth + "\/" + vDD + "\/" + vY2;
			break;
		case "MM-DD-YYYY" :
			vData = vMonth + "-" + vDD + "-" + vY4;
			break;
		case "MM-DD-YY" :
			vData = vMonth + "-" + vDD + "-" + vY2;
			break;

		case "DD\/MON\/YYYY" :
			vData = vDD + "\/" + vMon + "\/" + vY4;
			break;
		case "DD\/MON\/YY" :
			vData = vDD + "\/" + vMon + "\/" + vY2;
			break;
		case "DD-MON-YYYY" :
			vData = vDD + "-" + vMon + "-" + vY4;
			break;
		case "DD-MON-YY" :
			vData = vDD + "-" + vMon + "-" + vY2;
			break;

		case "DD\/MONTH\/YYYY" :
			vData = vDD + "\/" + vFMon + "\/" + vY4;
			break;
		case "DD\/MONTH\/YY" :
			vData = vDD + "\/" + vFMon + "\/" + vY2;
			break;
		case "DD-MONTH-YYYY" :
			vData = vDD + "-" + vFMon + "-" + vY4;
			break;
		case "DD-MONTH-YY" :
			vData = vDD + "-" + vFMon + "-" + vY2;
			break;

		case "DD\/MM\/YYYY" :
			vData = vDD + "\/" + vMonth + "\/" + vY4;
			break;
		case "DD\/MM\/YY" :
			vData = vDD + "\/" + vMonth + "\/" + vY2;
			break;
		case "DD-MM-YYYY" :
			vData = vDD + "-" + vMonth + "-" + vY4;
			break;
		case "DD-MM-YY" :
			vData = vDD + "-" + vMonth + "-" + vY2;
			break;

		case "YYYY-MM-DD" :
			vData = vY4 + "-" + vMonth + "-" + vDD;
			break;
		case "YY-MM-DD" :
			vData = vY2 + "-" + vMonth + "-" + vDD;
			break;
		case "YYYY\/MM\/DD" :
			vData = vY4 + "\/" + vMonth + "\/" + vDD;
			break;
		case "YY\/MM\/DD" :
			vData = vY2 + "\/" + vMonth + "\/" + vDD;
			break;
			
		default :
			vData = vY4 + "-" + vMonth + "-" + vDD;
	}

	return vData;
}

function Build(p_item, p_month, p_year, p_format) {
	var p_WinCal = ggWinCal;
	gCal = new Calendar(p_item, p_WinCal, p_month, p_year, p_format);

	// Customize your Calendar here..
	gCal.gBGColor="white";
	gCal.gLinkColor="black";
	gCal.gTextColor="black";
	gCal.gHeaderColor="darkgreen";

	// Choose appropriate show function
	if (gCal.gYearly)	gCal.showY();
	else	gCal.show();
}
function getXPosition1(id){
var e=document.getElementById(id);
var x=e.offsetLeft;
while(e=e.offsetParent){
x+=e.offsetLeft;
}
return x;
}
function getYPosition1(id){
var e=document.getElementById(id);
var y=e.offsetTop;
while(e=e.offsetParent){
y+=e.offsetTop;
}
return y;
}
function show_calendar() {
	/* 
		p_month : 0-11 for Jan-Dec; 12 for All Months.
		p_year	: 4-digit year
		p_format: Date format (mm/dd/yyyy, dd/mm/yy, ...)
		p_item	: Return Item.
	*/

	p_item = arguments[0];
	if (arguments[1] == null)
		p_month = new String(gNow.getMonth());
	else
		p_month = arguments[1];
	if (arguments[2] == "" || arguments[2] == null)
		p_year = new String(gNow.getFullYear().toString());
	else
		p_year = arguments[2];
	if (arguments[3] == null)
		p_format = "DD/MM/YYYY";
	else
		p_format = arguments[3];
	
	
	if(typeof($)=="undefined"||typeof($.ui)=="undefined") {
		///added by Blue 200911104 for locating 
    
    
    ///e
	vWinCal = window.open("", "Calendar", 
		"width=320,height=200,status=no,resizable=no,top=200,left=200");
	vWinCal.opener = self;
	//vWinCal.blur = self;
	var tev = setInterval(function() { vWinCal.focus(); }, 3000);
	vWinCal.onunload = function() {
	    clearInterval(tev);
	};
	ggWinCal = vWinCal;

	Build(p_item, p_month, p_year, p_format);
		
	}else{
		
		$(eval(p_item)).datepicker({
									changeMonth: true,
									changeYear: true,
									dateFormat: "dd/mm/yy"
								}).datepicker( 'show' );
		
	}
	

    
}
function show_calendarlocated() {
	/* 
		p_month : 0-11 for Jan-Dec; 12 for All Months.
		p_year	: 4-digit year
		p_format: Date format (mm/dd/yyyy, dd/mm/yy, ...)
		p_item	: Return Item.
	*/

	p_item = arguments[0];
	p_item1 = p_item.substring(p_item.indexOf(".")+1,p_item.length)
	//alert(p_item1);
	if (arguments[1] == null)
		p_month = new String(gNow.getMonth());
	else
		p_month = arguments[1];
	if (arguments[2] == "" || arguments[2] == null)
		p_year = new String(gNow.getFullYear().toString());
	else
		p_year = arguments[2];
	if (arguments[3] == null)
		p_format = "DD/MM/YYYY";
	else
		p_format = arguments[3];

    ///added by Blue 200911104 for locating 
    var xLeft=getXPosition1(p_item1);
	var yTop=getYPosition1(p_item1);
	// xLeft=xLeft-50;
	// yTop=yTop-50;
    
    ///e
	vWinCal = window.open("", "Calendar", "width=320,height=200,status=no,resizable=no,top="+xLeft+",left="+yTop);
	vWinCal.opener = self;
	ggWinCal = vWinCal;

	Build(p_item, p_month, p_year, p_format);
}
/*
Yearly Calendar Code Starts here
*/
function show_yearly_calendar(p_item, p_year, p_format) {
	// Load the defaults..
	if (p_year == null || p_year == "")
		p_year = new String(gNow.getFullYear().toString());
	if (p_format == null || p_format == "")
		p_format = "YYYY-DD-MM";

	var vWinCal = window.open("", "Calendar", "scrollbars=yes");
	vWinCal.opener = self;
	ggWinCal = vWinCal;

	Build(p_item, null, p_year, p_format);
}
function intDate(strDate)
{
    var tmpy="";
	var tmpm="";
	var tmpd="";
	var intdate;
	intdate=0;
	var status;
	status=0;
	var i;
	i=0
	
   for (i=0;i<strDate.length;i++)
	{	if (strDate.charAt(i)== '/')
		{
			status++;
		}
		if (status>2)
		{
			alert("Invalid format of date!");
			return 0;
		}
		if ((status==0) && (strDate.charAt(i)!='/'))
		{
			tmpd=tmpd+strDate.charAt(i)
		}
		if ((status==1) && (strDate.charAt(i)!='/'))
		{
			tmpm=tmpm+strDate.charAt(i)
		}
		if ((status==2) && (strDate.charAt(i)!='/'))
		{
			tmpy=tmpy+strDate.charAt(i)
		}

	}
	p_year=tmpy;
	p_month=tmpm;
	p_day=tmpd;
          
          
           if  (p_year=='')
				{var intYear=Math.ceil(parseFloat('0'));
				}
			else
				{var intYear=Math.ceil(parseFloat(p_year)*10000);
				}
		 if  (p_month=='')
				{var intMonth=Math.ceil(parseFloat('0'));
				}
			else
				{var intMonth=Math.ceil(parseFloat(p_month)*100);
				}
		 if  (p_day=='')
				{var intDay=Math.ceil(parseFloat('0'));
				}
			else
				{var intDay=Math.ceil(parseFloat(p_day));
				}
				

		intdate=intYear+intMonth+intDay;
		return intdate;

}


